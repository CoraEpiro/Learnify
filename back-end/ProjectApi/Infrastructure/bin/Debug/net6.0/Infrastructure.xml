<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Infrastructure</name>
    </assembly>
    <members>
        <member name="T:Infrastructure.DependencyInjection">
            <summary>
            Provides methods to configure dependency injection for infrastructure, Swagger documentation, configurations, and authentication/authorization.
            </summary>
        </member>
        <member name="M:Infrastructure.DependencyInjection.AddInfrastructure(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds infrastructure services to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance.</param>
            <param name="configuration">The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> instance.</param>
            <returns>The updated <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance.</returns>
        </member>
        <member name="M:Infrastructure.DependencyInjection.AddSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds Swagger documentation generation to the service collection.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance.</param>
            <returns>The updated <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance.</returns>
        </member>
        <member name="M:Infrastructure.DependencyInjection.AddConfigs(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds configuration objects to the service collection based on values from the application's configuration file.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance.</param>
            <param name="configuration">The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> instance.</param>
            <returns>The updated <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance.</returns>
        </member>
        <member name="M:Infrastructure.DependencyInjection.AuthenticationAndAuthorization(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds authentication to the service collection.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance.</param>
            <param name="configuration">for Jwt Token</param>
            <returns>The updated <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance.</returns>
        </member>
        <member name="T:Infrastructure.Persistence.UserRepository">
            <inheritdoc/>
        </member>
        <member name="M:Infrastructure.Persistence.UserRepository.#ctor(Infrastructure.Persistence.LearnifyDbContext,AppDomain.Interfaces.ICryptService,AppDomain.Interfaces.IJwtService,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Infrastructure.Persistence.UserRepository"/> class.
            </summary>
            <param name="context">The database context.</param>
            <param name="cryptService">The service for cryptography operations.</param>
            <param name="jwtService">The service for JSON Web Token (JWT) operations.</param>
            <param name="httpContextAccessor">The accessor for HTTP context.</param>
        </member>
        <member name="M:Infrastructure.Persistence.UserRepository.GetUserByEmailAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Infrastructure.Persistence.UserRepository.GetUserByIdAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Infrastructure.Persistence.UserRepository.GetUserByUsernameAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Infrastructure.Persistence.UserRepository.GetUserByUsersecretAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Infrastructure.Persistence.UserRepository.IsEmailExistAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Infrastructure.Persistence.UserRepository.IsUsernameExistAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Infrastructure.Persistence.UserRepository.LogInAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Infrastructure.Persistence.UserRepository.RegisterUserAsync(Application.DTO.InsertPendingUserDTO)">
            <inheritdoc/>
        </member>
        <member name="M:Infrastructure.Persistence.UserRepository.BuildUserAsync(AppDomain.DTOs.User.BuildUserDTO)">
            <inheritdoc/>
        </member>
        <member name="M:Infrastructure.Persistence.UserRepository.DeleteUserAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Infrastructure.Persistence.UserRepository.UpdateTokenAsync">
            <inheritdoc/>
        </member>
        <member name="M:Infrastructure.Persistence.UserRepository.UpdateUsernameAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Infrastructure.Persistence.UserRepository.UpdatePasswordAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Infrastructure.Persistence.UserRepository.SendOTPCodeAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Infrastructure.Persistence.UserRepository.VerifyEmailAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Infrastructure.Persistence.UserRepository.GetTokenFromRequest">
            <inheritdoc/>
        </member>
        <member name="M:Infrastructure.Persistence.UserRepository.GetClaimValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:CryptService">
            <inheritdoc/>
        </member>
        <member name="M:CryptService.#ctor(AppDomain.Common.Config.BCryptConfig)">
            <summary>
            Initialize object
            </summary>
            <param name="config"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:CryptService.CheckPassword(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CryptService.CryptPassword(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CryptService.GenerateSalt">
            <inheritdoc/>
        </member>
        <member name="T:DtoAndModelConvertors">
            <summary>
            Provides extension methods for converting between entity models and Data Transfer Objects (DTOs).
            </summary>
        </member>
        <member name="M:DtoAndModelConvertors.ToUserDTO(AppDomain.Entities.UserRelated.User)">
            <summary>
            Converts a <see cref="T:AppDomain.Entities.UserRelated.User"/> entity to a <see cref="T:AppDomain.DTO.UserDTO"/> Data Transfer Object.
            </summary>
            <param name="user">The <see cref="T:AppDomain.Entities.UserRelated.User"/> entity to convert.</param>
            <returns>The converted <see cref="T:AppDomain.DTO.UserDTO"/>.</returns>
        </member>
        <member name="M:DtoAndModelConvertors.ToPendingUserDTO(AppDomain.Entities.UserRelated.PendingUser)">
            <summary>
            Converts a <see cref="T:AppDomain.Entities.UserRelated.PendingUser"/> entity to a <see cref="T:AppDomain.DTOs.User.PendingUserDTO"/> Data Transfer Object.
            </summary>
            <param name="user">The <see cref="T:AppDomain.Entities.UserRelated.PendingUser"/> entity to convert.</param>
            <returns>The converted <see cref="T:AppDomain.DTOs.User.PendingUserDTO"/>.</returns>
        </member>
        <member name="T:JwtService">
            <inheritdoc/>
        </member>
        <member name="M:JwtService.#ctor(AppDomain.Common.Config.JwtConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:JwtService"/> class.
            </summary>
            <param name="config">The JWT configuration settings.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="config"/> is null.</exception>
        </member>
        <member name="M:JwtService.GenerateSecurityToken(System.String,System.String)">
            <inheritdoc/>
        </member>
    </members>
</doc>
